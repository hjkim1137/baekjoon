# 다이나믹 프로그래밍이란
- 이미 계산된 결과는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
- 일반적으로 두가지 방식(탑다운, 보텀업)으로 구성됨 (보텀업이 전형적인 형태)
- 탑다운에서는 종료조건을 명시한다, 보텀업은 반복문을 활용한다
- 동적 계획법이라고도 부른다(동적: 프로그램이 실행되는 도중에)

# 다이나믹 프로그래밍의 조건
1. 최적 부분 구조
- 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제 답을 모아 큰 문제 해결할 수 있음
2. 중복되는 부분 문제
- 동일한 작은 문제를 반복적으로 해결한다

# 예시: 피보나치 수열 (3번째 수는 1번째, 2번째의 합)
- 문제 n이 커지면 자식 함수가 여러번 중복 호출되는 비효율성 발생
- 따라서 이미 해결한 부분은 별도 메모리 공간에 할당

# 메모이제이션
- 한 번 계산한 결과를 메모리 공간에 메모
- 값을 기록해 놓는다는 점에서 캐싱이라고도 함 
- DP 테이블 : 결과 저장용 리스트

# 다이나믹 프로그래밍 문제 접근법
- dp 유형인지를 파악하는 것이 중요
- 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제 해결할 수 있는 지 검토하고 
- 다른 알고리즘으로 풀이 방법 떠오르지 않으면 다이나믹 프로그래밍을 고려할 것
- 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많음

# 예시 문제
- 개미 전사 문제(이미지 참고)
1. 현재 식량 창고 + 한 칸 앞까지의 최대값
2. 현재 식량 창고 + 두 칸 앞까지의 최대값
위 case 2개중에 큰 값을 택한다
- 1로 만들기 문제(이미지 참고)
- 효율적인 화폐 구성 문제